// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateHabitInput struct {
	Title     string      `json:"title"`
	AlertTime *string     `json:"alertTime"`
	SkipDays  []*WeekDays `json:"skipDays"`
}

type CreateUserInput struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

type Habit struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	AlertTime string     `json:"alertTime"`
	SkipDays  []WeekDays `json:"skipDays"`
}

type HabitRecord struct {
	HabitID string      `json:"habitId"`
	Date    string      `json:"date"`
	Status  HabitStatus `json:"status"`
}

type HabitRecordQueryResult struct {
	HabitID    string         `json:"habitId"`
	StartDate  string         `json:"startDate"`
	EndDate    string         `json:"endDate"`
	Records    []*HabitRecord `json:"records"`
	TotalCount int            `json:"totalCount"`
}

type HistoryQueryInput struct {
	HabitID   string `json:"habitId"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
}

type LoginUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RecordInput struct {
	HabitID string      `json:"habitId"`
	Date    string      `json:"date"`
	Status  HabitStatus `json:"status"`
}

type UpdateHabitInput struct {
	ID        string      `json:"id"`
	Title     string      `json:"title"`
	AlertTime *string     `json:"alertTime"`
	SkipDays  []*WeekDays `json:"skipDays"`
}

type User struct {
	ID    string `json:"id"`
	Email string `json:"email"`
	Name  string `json:"name"`
}

type HabitStatus string

const (
	HabitStatusIDLe    HabitStatus = "IDLE"
	HabitStatusSkipped HabitStatus = "SKIPPED"
	HabitStatusSucceed HabitStatus = "SUCCEED"
)

var AllHabitStatus = []HabitStatus{
	HabitStatusIDLe,
	HabitStatusSkipped,
	HabitStatusSucceed,
}

func (e HabitStatus) IsValid() bool {
	switch e {
	case HabitStatusIDLe, HabitStatusSkipped, HabitStatusSucceed:
		return true
	}
	return false
}

func (e HabitStatus) String() string {
	return string(e)
}

func (e *HabitStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HabitStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HabitStatus", str)
	}
	return nil
}

func (e HabitStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WeekDays string

const (
	WeekDaysMonday    WeekDays = "MONDAY"
	WeekDaysTuesday   WeekDays = "TUESDAY"
	WeekDaysWednesday WeekDays = "WEDNESDAY"
	WeekDaysThursday  WeekDays = "THURSDAY"
	WeekDaysFriday    WeekDays = "FRIDAY"
	WeekDaysSaturday  WeekDays = "SATURDAY"
	WeekDaysSunday    WeekDays = "SUNDAY"
)

var AllWeekDays = []WeekDays{
	WeekDaysMonday,
	WeekDaysTuesday,
	WeekDaysWednesday,
	WeekDaysThursday,
	WeekDaysFriday,
	WeekDaysSaturday,
	WeekDaysSunday,
}

func (e WeekDays) IsValid() bool {
	switch e {
	case WeekDaysMonday, WeekDaysTuesday, WeekDaysWednesday, WeekDaysThursday, WeekDaysFriday, WeekDaysSaturday, WeekDaysSunday:
		return true
	}
	return false
}

func (e WeekDays) String() string {
	return string(e)
}

func (e *WeekDays) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeekDays(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeekDays", str)
	}
	return nil
}

func (e WeekDays) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
